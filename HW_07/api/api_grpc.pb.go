// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeServiceClient interface {
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnimeList, error)
	Get(ctx context.Context, in *AnimeRequestId, opts ...grpc.CallOption) (*Anime, error)
	Post(ctx context.Context, in *Anime, opts ...grpc.CallOption) (*Anime, error)
	Put(ctx context.Context, in *Anime, opts ...grpc.CallOption) (*Anime, error)
	Delete(ctx context.Context, in *AnimeRequestId, opts ...grpc.CallOption) (*Empty, error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AnimeList, error) {
	out := new(AnimeList)
	err := c.cc.Invoke(ctx, "/api.AnimeService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) Get(ctx context.Context, in *AnimeRequestId, opts ...grpc.CallOption) (*Anime, error) {
	out := new(Anime)
	err := c.cc.Invoke(ctx, "/api.AnimeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) Post(ctx context.Context, in *Anime, opts ...grpc.CallOption) (*Anime, error) {
	out := new(Anime)
	err := c.cc.Invoke(ctx, "/api.AnimeService/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) Put(ctx context.Context, in *Anime, opts ...grpc.CallOption) (*Anime, error) {
	out := new(Anime)
	err := c.cc.Invoke(ctx, "/api.AnimeService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) Delete(ctx context.Context, in *AnimeRequestId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.AnimeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility
type AnimeServiceServer interface {
	GetAll(context.Context, *Empty) (*AnimeList, error)
	Get(context.Context, *AnimeRequestId) (*Anime, error)
	Post(context.Context, *Anime) (*Anime, error)
	Put(context.Context, *Anime) (*Anime, error)
	Delete(context.Context, *AnimeRequestId) (*Empty, error)
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeServiceServer struct {
}

func (UnimplementedAnimeServiceServer) GetAll(context.Context, *Empty) (*AnimeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAnimeServiceServer) Get(context.Context, *AnimeRequestId) (*Anime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAnimeServiceServer) Post(context.Context, *Anime) (*Anime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedAnimeServiceServer) Put(context.Context, *Anime) (*Anime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedAnimeServiceServer) Delete(context.Context, *AnimeRequestId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).Get(ctx, req.(*AnimeRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Anime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).Post(ctx, req.(*Anime))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Anime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).Put(ctx, req.(*Anime))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).Delete(ctx, req.(*AnimeRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _AnimeService_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AnimeService_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _AnimeService_Post_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _AnimeService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AnimeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
